// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.refactoring.safeDelete;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refactorings/kotlin.refactorings.tests.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2BindToElementTestGenerated extends AbstractK2BindToElementTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/call")
    public static class Call extends AbstractK2BindToElementTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("FullyQualified.kt")
        public void testFullyQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/call/FullyQualified.kt");
        }

        @TestMetadata("RootPkg.kt")
        public void testRootPkg() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/call/RootPkg.kt");
        }

        @TestMetadata("TypeArgument.kt")
        public void testTypeArgument() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/call/TypeArgument.kt");
        }

        @TestMetadata("UnQualified.kt")
        public void testUnQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/call/UnQualified.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/callableReference")
    public static class CallableReference extends AbstractK2BindToElementTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("FullyQualified.kt")
        public void testFullyQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/callableReference/FullyQualified.kt");
        }

        @TestMetadata("RootPkg.kt")
        public void testRootPkg() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/callableReference/RootPkg.kt");
        }

        @TestMetadata("UnQualified.kt")
        public void testUnQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/callableReference/UnQualified.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/type")
    public static class Type extends AbstractK2BindToElementTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("FullyQualified.kt")
        public void testFullyQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/type/FullyQualified.kt");
        }

        @TestMetadata("RootPkg.kt")
        public void testRootPkg() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/type/RootPkg.kt");
        }

        @TestMetadata("UnQualified.kt")
        public void testUnQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/bindToElement/type/UnQualified.kt");
        }
    }
}
